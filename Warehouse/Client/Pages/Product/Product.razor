@page "/producto/principal"
@using Warehouse.Shared.Reference
@using Warehouse.Shared.Models
@using Warehouse.Client.Components.Production
@using Warehouse.Client.Components.Product
@using Warehouse.Client.Components.Storage
@inject HttpClient _httpClient
@inject IDialogService _dialogService
@inject ISnackbar _snackbar

<MudButton @onclick="OpenDialogAdd" Variant="Variant.Filled" Color="Color.Primary" Class="mb-4">
    Agregar
</MudButton>
@if (_products == null)
{
    <LoadContent></LoadContent>
}
else
{
    <MudTable Items="_products" Hover="true" Breakpoint="Breakpoint.Sm" 
              Loading="@_isLoading" LoadingProgressColor="Color.Primary">
        <HeaderContent>
            <MudTh>ID</MudTh>
            <MudTh>Producción</MudTh>
            <MudTh>Nombre</MudTh>
            <MudTh>Peso</MudTh>
            <MudTh>Stock</MudTh>
            <MudTh>Fecha de expiración</MudTh>
            <MudTh>Fecha de producción</MudTh>
            <MudTh>Acciones</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.Id</MudTd>
            <MudTd DataLabel="Producción">@context.Production.Name</MudTd>
            <MudTd DataLabel="Nombre">@context.Name</MudTd>
            <MudTd DataLabel="Peso">@context.Weight</MudTd>
            <MudTd DataLabel="Stock">@context.Stock</MudTd>
            <MudTd DataLabel="Fec. Expiración">@context.DateExpiration</MudTd>
            <MudTd DataLabel="Fec. Producción">@context.DateProduction</MudTd>
            <MudTd DataLabel="Acciones">
                <MudIconButton OnClick="@(() => OpenDialogDelete(context.Id))"
                               Icon="@Icons.Material.Filled.Delete" Size="Size.Small"
                               Color="Color.Error"/>
                <MudIconButton OnClick="@(() => OpenDialogUpdate(context.Id))"
                               Icon="@Icons.Material.Filled.Edit" Size="Size.Small"
                               Color="Color.Warning"/>
                <MudIconButton OnClick="@(() => OpenDialogAddStorageMaterial(context.Id))"
                                               Icon="@Icons.Material.Filled.Send" Size="Size.Small"
                                               Color="Color.Info"/>
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    private IReadOnlyList<ProductReference> _products;
    private bool _isLoading;

    protected override async Task OnInitializedAsync()
    {
        await GetAllProducts();
    }

    private async Task GetAllProducts()
    {
        _products = await _httpClient.GetFromJsonAsync<IReadOnlyList<ProductReference>>("api/product");
        if (_products != null)
        {
            foreach (var product in _products)
            {
                product.Production = await GetProductionById(product.ProductionId);
            }    
        }        
    }

    private async Task<ProductionModel> GetProductionById(string id)
    {
        return await _httpClient.GetFromJsonAsync<ProductionModel>($"api/production/{id}");
    }

    private async Task OpenDialogAdd()
    {
        _isLoading = true;
        
        var parameters = new DialogParameters
        {
            {"TaskResult", new TaskResult()}
        };
        var dialogResult = await _dialogService.Show<AddProduct>("Agregar", parameters).Result;
        if (dialogResult.Data != null)
        {
            var newResult = (TaskResult) dialogResult.Data;
            if (newResult.Result)
            {
                await GetAllProducts();
            }
        }
        
        _isLoading = false;
    }

    private async Task OpenDialogUpdate(string id)
    {
        _isLoading = true;
        
        var parameters = new DialogParameters
        {
            {"TaskResult", new TaskResult()},
            {"ProductId", id}
        };
        var dialogResult = await _dialogService.Show<UpdateProduct>("Actualizar", parameters).Result;
        if (dialogResult.Data != null)
        {
            var newResult = (TaskResult) dialogResult.Data;
            if (newResult.Result)
            {
                await GetAllProducts();
            }
        }
        
        _isLoading = false;
    }
    
    private async Task OpenDialogDelete(string id)
    {
        _isLoading = true;

        var parameters = new DialogParameters
        {
            {"TaskResult", new TaskResult()},
            {"ProductId", id}
        };
        var dialogResult = await _dialogService.Show<DeleteProduct>("Eliminar", parameters).Result;
        if (dialogResult.Data != null)
        {
            var newResult = (TaskResult) dialogResult.Data;
            if (newResult.Result)
            {
                await GetAllProducts();
            }
        }
        
        _isLoading = false;
    }
    
    private void OpenDialogAddStorageMaterial(string id)
    {
        var parameters = new DialogParameters
        {
            {"TaskResult", new TaskResult()},
            {"ProductId", id}
        };
        _dialogService.Show<AddStorage>("Agregar", parameters);
    }
}