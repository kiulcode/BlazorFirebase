@page "/materia-prima/principal"
@using Warehouse.Shared.Reference
@using Warehouse.Shared.Models
@using Warehouse.Client.Components.RawMaterial
@using Warehouse.Client.Components.Production
@inject HttpClient _httpClient
@inject IDialogService _dialogService

<MudButton @onclick="OpenDialogAdd" Variant="Variant.Filled" Color="Color.Primary" Class="mb-4">
    Agregar
</MudButton>
@if (_rawMaterials == null)
{
    <LoadContent></LoadContent>
}
else
{
    <MudTable Items="_rawMaterials" Hover="true" Breakpoint="Breakpoint.Sm"
              Loading="@_isLoading" LoadingProgressColor="Color.Primary">
        <HeaderContent>
            <MudTh>ID</MudTh>
            <MudTh>Insumo</MudTh>
            <MudTh>Cantidad Entrante</MudTh>
            <MudTh>Cantidad Saliente</MudTh>
            <MudTh>Fecha de creación</MudTh>
            <MudTh>Acciones</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.Id</MudTd>
            <MudTd DataLabel="Insumo">@context.Input.Name - @context.Input.UnitMeasure</MudTd>
            <MudTd DataLabel="Cant. Entrante">@context.IncomingQuantity</MudTd>
            <MudTd DataLabel="Cant. Saliente">@context.OutgoingQuantity</MudTd>
            <MudTd DataLabel="Creación">@context.Create</MudTd>
            <MudTd DataLabel="Acciones">
                <MudIconButton OnClick="@(() => OpenDialogDelete(context.Id))"
                               Icon="@Icons.Material.Filled.Delete" Size="Size.Small"
                               Color="Color.Error"/>
                <MudIconButton OnClick="@(() => OpenDialogUpdate(context.Id))"
                               Icon="@Icons.Material.Filled.Edit" Size="Size.Small"
                               Color="Color.Warning"/>
                <MudIconButton OnClick="@(() => OpenDialogAddProduction(context.Id))"
                               Icon="@Icons.Material.Filled.Send" Size="Size.Small"
                               Color="Color.Info"/>
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    private IReadOnlyList<RawMaterialReference> _rawMaterials;
    private bool _isLoading;

    protected override async Task OnInitializedAsync()
    {
        await GetAllRawMaterials();
    }

    private async Task GetAllRawMaterials()
    {
        _rawMaterials = await _httpClient.GetFromJsonAsync<IReadOnlyList<RawMaterialReference>>("api/RawMaterial");
        if (_rawMaterials != null)
        {
            foreach (var rawMaterial in _rawMaterials)
            {
                rawMaterial.Input = await GetInputById(rawMaterial.InputId);
            }
        }
    }

    private async Task<InputModel> GetInputById(string inputId)
    {
        return await _httpClient.GetFromJsonAsync<InputModel>($"api/Input/{inputId}");
    }

    private async Task OpenDialogAdd()
    {
        _isLoading = true;

        var parameters = new DialogParameters
        {
            {"TaskResult", new TaskResult()}
        };
        var dialogResult = await _dialogService.Show<AddRawMaterial>("Agregar", parameters).Result;
        if (dialogResult.Data != null)
        {
            var newResult = (TaskResult) dialogResult.Data;
            if (newResult.Result)
            {
                await GetAllRawMaterials();
            }
        }

        _isLoading = false;
    }

    private async Task OpenDialogUpdate(string id)
    {
        _isLoading = true;

        var parameters = new DialogParameters
        {
            {"TaskResult", new TaskResult()},
            {"RawMaterialId", id}
        };
        var dialogResult = await _dialogService.Show<UpdateRawMaterial>("Actualizar", parameters).Result;
        if (dialogResult.Data != null)
        {
            var newResult = (TaskResult) dialogResult.Data;
            if (newResult.Result)
            {
                await GetAllRawMaterials();
            }
        }

        _isLoading = false;
    }

    private async Task OpenDialogDelete(string id)
    {
        _isLoading = true;

        var parameters = new DialogParameters
        {
            {"TaskResult", new TaskResult()},
            {"RawMaterialId", id}
        };
        var dialogResult = await _dialogService.Show<DeleteRawMaterial>("Eliminar", parameters).Result;
        if (dialogResult.Data != null)
        {
            var newResult = (TaskResult) dialogResult.Data;
            if (newResult.Result)
            {
                await GetAllRawMaterials();
            }
        }

        _isLoading = false;
    }

    private void OpenDialogAddProduction(string id)
    {
        var parameters = new DialogParameters {{"RawMaterialId", id}};
        _dialogService.Show<AddProduction>("Agregar", parameters);
    }

}