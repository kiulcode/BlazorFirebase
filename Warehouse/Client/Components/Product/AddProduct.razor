@using Warehouse.Shared.Models
@inject HttpClient _httpClient
@inject ISnackbar _snackbar

<EditForm Model="_product" OnValidSubmit="Create">
    <DataAnnotationsValidator/>
    <MudDialog>
        <DialogContent>
            
            <MudItem Class="mb-4">
                <MudSelect T="string" Label="Producción" Variant="Variant.Outlined"
                           @bind-Value="_product.ProductionId" For="@(() => _product.ProductionId)">
                    @if (_productions != null)
                    {
                        @foreach (var production in _productions)
                        {
                            <MudSelectItem Value="@(production.Id)">@production.Name</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>

            <MudItem Class="mb-4">
                <MudTextField Label="Nombre" Variant="Variant.Outlined"
                              @bind-Value="_product.Name" For="@(() => _product.Name)"/>
            </MudItem>

            <MudItem Class="mb-4">
                <MudNumericField Label="Peso" Variant="Variant.Outlined"
                                 @bind-Value="_product.Weight" For="@(() => _product.Weight)"/>
            </MudItem>

            <MudItem Class="mb-4">
                <MudNumericField Label="Stock" Variant="Variant.Outlined"
                                 @bind-Value="_product.Stock" For="@(() => _product.Stock)"/>
            </MudItem>

            <MudItem Class="mb-4">
                <MudDatePicker PickerVariant="PickerVariant.Dialog"
                               Label="Fecha de producción" Variant="Variant.Outlined" DateFormat="dd/MM/yyyy"
                               @bind-Date="_product.Date1"/>
            </MudItem>
            
            <MudItem>
                <MudDatePicker PickerVariant="PickerVariant.Dialog"
                               Label="Fecha de expiración" Variant="Variant.Outlined" DateFormat="dd/MM/yyyy"
                               @bind-Date="_product.Date2"/>
            </MudItem>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel" ButtonType="ButtonType.Button">Cancelar</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Guardar</MudButton>
        </DialogActions>
    </MudDialog>
    @if (_isLoading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true"/>
    }
</EditForm>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public TaskResult TaskResult { get; set; }

    private readonly ProductViewModel _product = new();
    private IReadOnlyList<ProductionModel> _productions;
    private bool _isLoading;

    protected override async Task OnInitializedAsync()
    {
        await GetAllProductions();
    }

    private async Task GetAllProductions()
    {
        _productions = await _httpClient.GetFromJsonAsync<IReadOnlyList<ProductionModel>>("api/production");
    }

    private void Cancel() => MudDialog.Cancel();

    private async Task Create()
    {
        _isLoading = true;

        if (_product.Date1 != null)
        {
            var dateValue = _product.Date1.Value;
            _product.DateProduction = dateValue.ToString("dd/MM/yyyy");
        }

        if (_product.Date2 != null)
        {
            var dateValue = _product.Date2.Value;
            _product.DateExpiration = dateValue.ToString("dd/MM/yyyy");
        }
        
        var httpResponse = await _httpClient.PostAsJsonAsync("api/product", _product);
        if (httpResponse.StatusCode == HttpStatusCode.OK)
        {
            TaskResult.Result = true;
            MudDialog.Close(DialogResult.Ok(TaskResult));
            _snackbar.Add("😉 Producto creado exitosamente", Severity.Success);
        }
        else
        {
            _snackbar.Add("😥 Error al crear el producto", Severity.Error);
        }

        _isLoading = false;
    }

}