@using Warehouse.Shared.Models
@inject HttpClient _httpClient
@inject ISnackbar _snackbar

<EditForm Model="_production" OnValidSubmit="Create">
    <DataAnnotationsValidator/>
    <MudDialog>
        <DialogContent>
            <MudItem Class="mb-4">
                <MudTextField Label="Nombre" Variant="Variant.Outlined"
                              @bind-Value="_production.Name" For="@(() => _production.Name)"/>
            </MudItem>

            <MudItem Class="mb-4">
                <MudSelect T="string" Label="Sector" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter"
                           @bind-Value="_production.SectorId" For="@(() => _production.SectorId)">
                    @if (_sectors != null)
                    {
                        @foreach (var sector in _sectors)
                        {
                            <MudSelectItem Value="@(sector.Id)">@sector.Name</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>

            <MudItem Class="mb-4">
                <MudSelect T="string" Label="Tipo de conserva" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter"
                           @bind-Value="_production.PreserveTypeId" For="@(() => _production.PreserveTypeId)">
                    @if (_preservesTypes != null)
                    {
                        @foreach (var preserveType in _preservesTypes)
                        {
                            <MudSelectItem Value="@(preserveType.Id)">@preserveType.Name</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>

            <MudItem Class="mb-4">
                <MudNumericField Label="Producto Estimado" Variant="Variant.Outlined"
                                 @bind-Value="_production.EstimatedProduct" For="@(() => _production.EstimatedProduct)"/>
            </MudItem>

            <MudItem>
                <MudDatePicker PickerVariant="PickerVariant.Dialog"
                               Label="Fecha" Variant="Variant.Outlined" DateFormat="dd/MM/yyyy"
                               @bind-Date="_production.CreateDate"/>
            </MudItem>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel" ButtonType="ButtonType.Button">Cancelar</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Guardar</MudButton>
        </DialogActions>
    </MudDialog>
    @if (_isLoading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true"/>
    }
</EditForm>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public TaskResult TaskResult { get; set; }

    private readonly ProductionViewModel _production = new();
    private IReadOnlyList<SectorModel> _sectors;
    private IReadOnlyList<PreserveTypeModel> _preservesTypes;
    private bool _isLoading;

    protected override async Task OnInitializedAsync()
    {
        await GetAllSectors();
        await GetAllPreservesTypes();
    }

    private async Task GetAllSectors()
    {
        _sectors = await _httpClient.GetFromJsonAsync<IReadOnlyList<SectorModel>>("api/sector");
    }

    private async Task GetAllPreservesTypes()
    {
        _preservesTypes = await _httpClient.GetFromJsonAsync<IReadOnlyList<PreserveTypeModel>>("api/preserveType");
    }

    private void Cancel() => MudDialog.Cancel();

    private async Task Create()
    {
        _isLoading = true;

        if (_production.CreateDate != null)
        {
            var dateValue = _production.CreateDate.Value;
            _production.Create = dateValue.ToString("dd/MM/yyyy");
        }

        var httpResponse = await _httpClient.PostAsJsonAsync("api/production", _production);
        if (httpResponse.StatusCode == HttpStatusCode.OK)
        {
            TaskResult.Result = true;
            MudDialog.Close(DialogResult.Ok(TaskResult));
            _snackbar.Add("😉 Producción creada exitosamente", Severity.Success);
        }
        else
        {
            _snackbar.Add("😥 Error al crear la producción", Severity.Error);
        }

        _isLoading = false;
    }

}