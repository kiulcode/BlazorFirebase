@using Warehouse.Shared.Models
@inject HttpClient _httpClient
@inject ISnackbar _snackbar


<EditForm Model="_input" OnValidSubmit="Update">
    <DataAnnotationsValidator/>
    <MudDialog>
        <DialogContent>
            @if (_input == null || _inputTypes == null)
            {
                <LoadUpdate></LoadUpdate>
            }
            else
            {
                <MudItem Class="mb-4">
                    <MudSelect T="string" Label="Tipo" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter"
                               @bind-Value="_input.InputTypeId" For="@(() => _input.InputTypeId)">
                        @if (_inputTypes != null)
                        {
                            @foreach (var inputType in _inputTypes)
                            {
                                <MudSelectItem Value="@(inputType.Id)">@inputType.Name</MudSelectItem>
                            }
                        }
                    </MudSelect>
                </MudItem>
                <MudItem Class="mb-4">
                    <MudTextField Label="Nombre" HelperText="Max. 30 caracteres" Variant="Variant.Outlined"
                                  @bind-Value="_input.Name" For="@(() => _input.Name)"/>
                </MudItem>
                <MudItem>
                    <MudSelect T="string" Label="Unidad de medida" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter"
                               @bind-Value="_input.UnitMeasure" For="@(() => _input.UnitMeasure)">
                        <MudSelectItem Value="@("kg")">Kilogramo</MudSelectItem>
                        <MudSelectItem Value="@("hg")">Hectogramo</MudSelectItem>
                        <MudSelectItem Value="@("dag")">Decagramo</MudSelectItem>
                        <MudSelectItem Value="@("g")">Gramo</MudSelectItem>
                        <MudSelectItem Value="@("dg")">Decigramo</MudSelectItem>
                        <MudSelectItem Value="@("cg")">Centigramo</MudSelectItem>
                        <MudSelectItem Value="@("mg")">Miligramo</MudSelectItem>
                    </MudSelect>
                </MudItem>
            }
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel" ButtonType="ButtonType.Button">Cancelar</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Warning">Actualizar</MudButton>
        </DialogActions>
    </MudDialog>
    @if (_isLoading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true"/>
    }
</EditForm>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public TaskResult TaskResult { get; set; }

    [Parameter]
    public string InputId { get; set; }

    private InputViewModel _input = new();
    private IReadOnlyList<InputTypeModel> _inputTypes;
    private bool _isLoading;

    protected override async Task OnInitializedAsync()
    {
        await GetInputById();
        await GetAllInputsTypes();
    }

    private async Task GetInputById()
    {
        _input = await _httpClient.GetFromJsonAsync<InputViewModel>($"api/input/{InputId}");
    }

    private async Task GetAllInputsTypes()
    {
        _inputTypes = await _httpClient.GetFromJsonAsync<IReadOnlyList<InputTypeModel>>("api/inputType");
    }

    private void Cancel() => MudDialog.Cancel();

    private async Task Update()
    {
        _isLoading = true;

        var httpResponse = await _httpClient.PutAsJsonAsync("api/Input", _input);

        if (httpResponse.StatusCode == HttpStatusCode.OK)
        {
            TaskResult.Result = true;
            MudDialog.Close(DialogResult.Ok(TaskResult));
            _snackbar.Add("😉 Insumo actualizado", Severity.Success);
        }
        else
        {
            _snackbar.Add("😔 Ocurrió un error al actualizar el insumo", Severity.Error);
        }

        _isLoading = false;
    }

}